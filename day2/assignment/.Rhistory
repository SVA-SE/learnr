a <- c(2,3,4,5,6,"b")
a_factor <- as.factor(a)
a_factor
as.numeric(a_factor)
summary(as.numeric(a_factor))
summary(as.numeric(a))
q()
n
data("Orange")
str(Orange)
str(Orange$circumference)
library(lme4)
help("family")
library(lme4)
help("str")
a <- 1:12
a
str(1:12)
str(freeny)
library(DT)
vignette(DT)
vignette("DT")
MTcars
mtcasr
mtcars
a <- c(2,4,8,3,5,4,1,3,8,NA,9,5,6,8,4,2,6,4,7,3,NA,5,6,7,8,3,9,1,12,14,100,0,NA)
mean(a)
max(a)
max(a, na.rm = TRUE)
min(a, na.na = TRUE)
seq(from = 1, to =20)
seq(from = 2, to = 20, by = 2)
rep(5, 10)
rep(c(1,2), times = 5)
rep(c(1,2), length.out = 10)
seq(from = 0, to = 1, by = 0.01)
seq(from = 0, to = 1, by = 0.01)
seq(from = 0, to = 1, length.out = 100)
seq(from = 0, to = 1, length.out = 101)
rm(list=ls())
library(gtools)
library(dplyr)
install.packages("gtools")
travelingvamp <- function(N,dim=2, visualize=FALSE) {
# N is the number of maidens and dim is the dimensional space
# the default is 2 but you can imagine higher or lower dimensional as well
# Generate the matrix of maidens
maids <- matrix(rnorm(N*dim,dist), ncol=dim)
# Write a function to minimize the euclidean distance.
# You could imagine alternative distance tools
euclid <- function(y)
(y[-1,]-y[-nrow(y),])^2 %>%
apply(1,function(x) sum(x) %>% sqrt) %>%
sum
# Calculate all of the alternative routes
routes <- permutations(N,N)
# K is a measure of the number of routes
K <- prod(1:N)
# Create an empty vector of distance for each route
dist <- rep(NA, K)
# Calculate the distance needed to travel from the origin 0 to
# through the route
for (i in 1:K) dist[i] <- euclid(rbind(0,maids[routes[i,],]))
# Find the minimum and the maximum distance routes
rmin <- routes[(dist==min(dist))]
rmax <- routes[(dist==max(dist))]
# If visualize is on, the graph both the quickest and longest routes
if (visualize) {
par(mfrow=c(2,1), mar=c(.5,0,0,0))
plot(rbind(0,maids[rmin,]), type='b', lwd=2, xaxt='n')
points(0,0, col="darkred", lwd=4)
par(mar=c(0,0,.5,0))
plot(rbind(0,maids[rmax,]), type='b', lwd=2, xaxt='n')
points(0,0, col="darkred", lwd=4)
mtext(paste("Round:",N, "#:", K, "Min:", round(min(dist),2),"Max:",round(max(dist),2)))
}
# Return the fastest and shortest routes
list(rmin=rbind(0,maids[rmin,]),
rmax=rbind(0,maids[rmax,])
)}
# Looks like it is working well
travelingvamp(3, visualize=TRUE)
library(gtools)
library(dplyr)
travelingvamp(3, visualize=TRUE)
N <- 10
time <- rep(0, N)
a <- c(1,2,3,4,5,6,7,8,9,10)
a[3]
a[c(3,5)]
a <- c(10,20,30,40,50,60,70,80,90,100)
a[3]
a[c(3,5)]
a[c(FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)]
a[c(FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)]
b <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
a <- c(10,20,30,40,50,60,70,80,90,100)
df <- data.frame("number" = a, "letter" = b, stringsAsFactors = FALSE)
df[2,1]
df[2, "letter"]
df[2, "number"]
df[,2]
df[3,]
df[2, c(FALSE, TRUE)]
a[c(TRUE, FALSE)]
a[c(TRUE, FALSE, FALSE)]
a <- c(10,20,30,40,50,60,70,80,90,100)
b <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
a[3]
a <- c(10,20.45,30,40,50,60,70,80,90,100)
b <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
a[3]
a[2]
a[c(3,5)]
a[c(FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)]
df <- data.frame("number" = a, "letter" = b, stringsAsFactors = FALSE)
df
df[2,1]
df[2, "number"]
df[2, c(FALSE, TRUE)]
df[,2]
df[3,]
a
a[c(TRUE, FALSE)]
a[c(TRUE, FALSE, FALSE)]
clear
clear()
library(ggplot2)
library(gapminder)
str(gapminder)
head(gapminder)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp))
p <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp))
str(p)
p + geom_point()
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point()
p + geom_point() + scale_x_log10()
p + geom_point(aes(color = continent))
p + geom_point(alpha = (1/3), size = 3)
p + geom_point(aes(colour = continent))
p + geom_point(alpha = (1/3), size = 3)
p + geom_point() + geom_smooth()
p + geom_point() + geom_smooth()
library("mgcv", lib.loc="/usr/lib/R/library")
install.packages("mgcv")
p + geom_point() + geom_smooth()
p + geom_point(size = 5) + geom_smooth()
p + geom_point(size = 5, aes(colour = continent)) + geom_smooth()
p + geom_point() + geom_smooth(lwd = 3, se = FALSE)
p + geom_point() + geom_smooth(lwd = 3, se = FALSE, alpha = 1/3)
p + geom_point() + geom_smooth(lwd = 3, se = FALSE)
p + geom_point() + geom_smooth(lwd = 1, se = FALSE)
p + geom_point() + geom_smooth(lwd = 3, se = FALSE, method = "lm")
unique(gapminder$country)
jCountries <- c("United Kingdom",
"Australia",
"Sweden" ,
"New Zealand",
"United States",
"Canada",
"Switzerland",
"Germany",
"Italy")
gapminder2 <- subset(gapminder, country %in% jCountries)
ggplot(gapminder2, aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point()
jCountries <- c("United Kingdom",
jCountries <- c("United Kingdom",
"Australia",
"Sweden" ,
"New Zealand",
"Switzerland",
"Germany",
"Italy",
"Rwanda",
"Mexico")
"Mexico")
jCountries <- c("United Kingdom",
"Australia",
"Sweden" ,
"New Zealand",
"Switzerland",
"Germany",
"Italy",
"Rwanda",
"Mexico")
gapminder2 <- subset(gapminder, country %in% jCountries)
ggplot(gapminder2, aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point()
read.csv("pig_adg.csv")
setwd("/media/trosendal/OS/projects/learnr/learnr_material/day2/lesson12")
df <- read.csv("pig_adg.csv")
str()
str(df)
fred <- ggplot(df, aes(x = ar, y = dtm))
fred + geom_point()
fred + geom_point() + geom_smooth()
fred + geom_point() + geom_smooth() + facet_wrap(sex ~ lu)
str(df)
fred + geom_point() + geom_smooth() + facet_wrap(sex ~ pn)
fred + geom_point() + geom_smooth() + facet_grid(sex ~ pn)
str(df)
hist(df$epg5)
setwd("/media/trosendal/OS/projects/learnr/learnr_material/day2/lesson13")
```{r, echo = FALSE, message = TRUE}
library(ggplot2)
pig_adg <- read.csv("pig_adg.csv")
boxplot(pig_adg$dtm ~ pig_adg$ar,
ylab = "Days to market", col = "darkkhaki",
xlab = "Atrophic Rhinitis score")
library(ggplot2)
pig_adg <- read.csv("pig_adg.csv")
boxplot(pig_adg$dtm ~ pig_adg$ar,
ylab = "Days to market", col = "darkkhaki",
xlab = "Atrophic Rhinitis score")
quantiles <- quantile(pig_adg$dtm, c(0, 0.05, 0.5, 0.95, 1))
fred <- quantile(pig_adg$dtm, c(0, 0.05, 0.5, 0.95, 1))
fred
pig_adg <- read.csv("pig_adg.csv")
lm(pig_adg$adg ~ pig_adg$sex)
summary(lm(pig_adg$adg ~ pig_adg$sex))
pig_adg$farm <- as.factor(pig_adg$farm)
summary(lm(pig_adg$adg ~ pig_adg$sex + pig_adg$farm))
install.packages("broom")
library(broom)
tidy(a)
a <- lm(pig_adg$adg ~ pig_adg$sex + pig_adg$farm)
tidy(a)
str(tidy(a))
str(a)
coeffs(a)
coef(a)
coef(a)["pig_adg$sex"]
sex <- coef(a)["pig_adg$sex"]
sex <- exp(sex)
sex
a <- lm(pig_adg$adg ~ pig_adg$sex + pig_adg$farm)
sex <- coef(a)["pig_adg$sex"]
sex
setwd("/media/trosendal/OS/projects/learnr/learnr/day2/assignment")
a  <- read.csv("prewmort_a.csv")
b <- read.csv("prewmort_b.csv")
farm <- read.csv("farm_level.csv")
all_litters <- rbind(a, b)
match(all_litters$herd, farm$herd)
index <- match(all_litters$herd, farm$herd)
View(all_litters)
View(farm)
all_litters$coli_vac <- farm$coli_vac[index]
length(which(is.na(all_litters$coli_vac)))
lm((all_litters$lmort/all_litters$lsize) ~ as.factor(all_litters$year))
all_litters$precstill <- 100*(all_litters$lmort/all_litters$lsize)
all_litters$year <- as.factor(all_litters$year)
lm(all_litters$precstill ~ all_litters$year)
hist(all_litters$precstill)
is.na(all_litters$precstill)
length(which(is.infinite(all_litters$precstill)))
which(is.infinite(all_litters$precstill))
all_litters$precstill[which(is.infinite(all_litters$precstill))] <- NA
lm(all_litters$precstill ~ all_litters$year)
a  <- read.csv("prewmort_a.csv")
b <- read.csv("prewmort_b.csv")
farm <- read.csv("farm_level.csv")
all_litters <- rbind(a, b)
index <- match(all_litters$herd, farm$herd)
all_litters$coli_vac <- farm$coli_vac[index]
length(which(is.na(all_litters$coli_vac)))
##Investigate the effect of year on percent stillbirth in the litter. (model or graph)
all_litters$precstill <- 100*(all_litters$lmort/all_litters$lsize)
all_litters$year <- as.factor(all_litters$year)
lm(all_litters$precstill ~ all_litters$year)
summary(all_litters)
a  <- read.csv("prewmort_a.csv")
b <- read.csv("prewmort_b.csv")
farm <- read.csv("farm_level.csv")
all_litters <- rbind(a, b)
index <- match(all_litters$herd, farm$herd)
all_litters$coli_vac <- farm$coli_vac[index]
length(which(is.na(all_litters$coli_vac)))
head(all_litters)
